import { TimeSlot, TaskAssignment } from '../types';

export type DeadlineType = 'soft' | 'hard';
export type TaskPriority = 'low' | 'medium' | 'high' | 'urgent';

export interface DeadlineConfig {
  type: DeadlineType;
  reason?: string;
  priority: TaskPriority;
}

export interface DeadlineCalculationParams {
  startDate: string;
  totalHours: number;
  workingHoursPerDay: number;
  workingDays: number[];
  planningFactor?: number;
  priority: TaskPriority;
  priorityBuffers?: Record<TaskPriority, number>;
}

export interface DeadlineCalculationResult {
  deadline: string;
  workingDaysNeeded: number;
  planningDays: number;
  bufferDays: number;
  totalDays: number;
  breakdown: {
    pureWorkDays: number;
    planningFactor: number;
    priorityBuffer: number;
  };
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
export const DEFAULT_PLANNING_FACTOR = 1.4; // 40% –∑–∞–ø–∞—Å –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞

export const DEFAULT_PRIORITY_BUFFERS: Record<TaskPriority, number> = {
  urgent: 0,    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - –±–µ–∑ –±—É—Ñ–µ—Ä–∞
  high: 0.5,    // –í—ã—Å–æ–∫–∏–π - 0.5 –¥–Ω—è –±—É—Ñ–µ—Ä–∞
  medium: 1,    // –°—Ä–µ–¥–Ω–∏–π - 1 –¥–µ–Ω—å –±—É—Ñ–µ—Ä–∞
  low: 2,       // –ù–∏–∑–∫–∏–π - 2 –¥–Ω—è –±—É—Ñ–µ—Ä–∞
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–µ–ª –ª–∏ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏
 */
export const isDeadlinePassed = (deadline: string): boolean => {
  const now = new Date();
  const deadlineDate = new Date(deadline);
  return now > deadlineDate;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –ª–∏ –¥–µ–¥–ª–∞–π–Ω (–≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π)
 */
export const isDeadlineApproaching = (deadline: string): boolean => {
  const now = new Date();
  const deadlineDate = new Date(deadline);
  const threeDaysFromNow = new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000);
  return deadlineDate <= threeDaysFromNow && deadlineDate >= now;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
 */
export const isTaskAssignmentOverdue = (assignment: TaskAssignment): boolean => {
  if (!assignment.deadline) return false;
  return isDeadlinePassed(assignment.deadline);
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
 */
export const isTimeSlotOverdue = (slot: TimeSlot): boolean => {
  if (!slot.deadline) return false;
  return isDeadlinePassed(slot.deadline) && slot.status !== 'completed';
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
 */
export const getDaysUntilDeadline = (deadline: string): number => {
  const now = new Date();
  const deadlineDate = new Date(deadline);
  const diffTime = deadlineDate.getTime() - now.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏
 */
export const getDaysOverdue = (deadline: string): number => {
  const now = new Date();
  const deadlineDate = new Date(deadline);
  const diffTime = now.getTime() - deadlineDate.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞
 */
export const getDeadlineColor = (deadline: string, deadlineType: DeadlineType = 'soft'): string => {
  if (isDeadlinePassed(deadline)) {
    return deadlineType === 'hard' ? 'text-red-600' : 'text-orange-600';
  }
  
  if (isDeadlineApproaching(deadline)) {
    return deadlineType === 'hard' ? 'text-yellow-600' : 'text-blue-600';
  }
  
  return 'text-green-600';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞
 */
export const getDeadlineText = (deadline: string, deadlineType: DeadlineType = 'soft'): string => {
  if (isDeadlinePassed(deadline)) {
    const daysOverdue = getDaysOverdue(deadline);
    return deadlineType === 'hard' 
      ? `–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${daysOverdue} –¥–Ω.`
      : `–ü—Ä–µ–≤—ã—à–µ–Ω –Ω–∞ ${daysOverdue} –¥–Ω.`;
  }
  
  if (isDeadlineApproaching(deadline)) {
    const daysLeft = getDaysUntilDeadline(deadline);
    return `–û—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω.`;
  }
  
  const daysLeft = getDaysUntilDeadline(deadline);
  return `–û—Å—Ç–∞–ª–æ—Å—å ${daysLeft} –¥–Ω.`;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø–ª–∞–Ω–æ–≤—ã–µ —á–∞—Å—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
export const canExceedPlannedHoursForAssignment = (assignment: TaskAssignment): boolean => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∂–µ—Å—Ç–∫–∏–π –¥–µ–¥–ª–∞–π–Ω, –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞
  if (assignment.deadlineType === 'hard') {
    return isDeadlinePassed(assignment.deadline || '');
  }
  
  // –î–ª—è –º—è–≥–∫–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ
  return true;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø–ª–∞–Ω–æ–≤—ã–µ —á–∞—Å—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
 */
export const canExceedPlannedHoursForSlot = (slot: TimeSlot): boolean => {
  // –ï—Å–ª–∏ —Å–ª–æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –µ—Å—Ç—å –∂–µ—Å—Ç–∫–∏–π –¥–µ–¥–ª–∞–π–Ω, 
  // –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–µ–¥–ª–∞–π–Ω–∞
  if (slot.isAssignedByAdmin && slot.deadlineType === 'hard') {
    return isDeadlinePassed(slot.deadline || '');
  }
  
  // –î–ª—è –º—è–≥–∫–∏—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏–ª–∏ —Å–ª–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º, 
  // –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ
  return true;
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
 */
export const calculateRecommendedDeadline = (
  plannedHours: number, 
  priority: TaskPriority = 'medium',
  workDaysPerWeek: number = 5,
  hoursPerDay: number = 8
): string => {
  const now = new Date();
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const priorityMultipliers = {
    low: 1.5,
    medium: 1.0,
    high: 0.7,
    urgent: 0.5
  };
  
  const multiplier = priorityMultipliers[priority];
  const adjustedHours = plannedHours * multiplier;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
  const workDaysNeeded = Math.ceil(adjustedHours / hoursPerDay);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω—ã–µ –¥–Ω–∏ (20% –æ—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
  const bufferDays = Math.ceil(workDaysNeeded * 0.2);
  const totalDays = workDaysNeeded + bufferDays;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
  let daysAdded = 0;
  let currentDate = new Date(now);
  
  while (daysAdded < totalDays) {
    currentDate.setDate(currentDate.getDate() + 1);
    const dayOfWeek = currentDate.getDay();
    
    // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç)
    if (dayOfWeek >= 1 && dayOfWeek <= 5) {
      daysAdded++;
    }
  }
  
  return currentDate.toISOString().split('T')[0];
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±—É—Ñ–µ—Ä–æ–≤
 */
export const calculateAdvancedDeadline = (params: DeadlineCalculationParams): DeadlineCalculationResult => {
  const {
    startDate,
    totalHours,
    workingHoursPerDay,
    workingDays,
    planningFactor = DEFAULT_PLANNING_FACTOR,
    priority,
    priorityBuffers = DEFAULT_PRIORITY_BUFFERS
  } = params;

  // 1. –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–∞—Å—ã –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (—á–∏—Å—Ç–∞—è —Ä–∞–±–æ—Ç–∞)
  const pureWorkDays = Math.ceil(totalHours / workingHoursPerDay);
  
  // 2. –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const planningDays = Math.ceil(pureWorkDays * planningFactor);
  
  // 3. –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const bufferDays = priorityBuffers[priority];
  const totalDays = planningDays + bufferDays;
  
  // 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞, —É—á–∏—Ç—ã–≤–∞—è —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
  const deadline = calculateDeadlineDate(startDate, totalDays, workingDays);
  
  return {
    deadline,
    workingDaysNeeded: pureWorkDays,
    planningDays,
    bufferDays,
    totalDays,
    breakdown: {
      pureWorkDays,
      planningFactor,
      priorityBuffer: bufferDays,
    }
  };
};

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
 */
const calculateDeadlineDate = (startDate: string, totalWorkingDays: number, workingDays: number[]): string => {
  const start = new Date(startDate);
  let currentDate = new Date(start);
  let workingDaysCount = 0;
  
  while (workingDaysCount < totalWorkingDays) {
    const dayOfWeek = currentDate.getDay();
    if (workingDays.includes(dayOfWeek)) {
      workingDaysCount++;
    }
    currentDate.setDate(currentDate.getDate() + 1);
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
  currentDate.setDate(currentDate.getDate() - 1);
  return currentDate.toISOString().split('T')[0];
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏
 */
export const getPriorityIcon = (priority: TaskPriority): string => {
  const icons = {
    low: '‚¨áÔ∏è',
    medium: '‚û°Ô∏è',
    high: '‚¨ÜÔ∏è',
    urgent: 'üö®'
  };
  return icons[priority];
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏
 */
export const getPriorityColor = (priority: TaskPriority): string => {
  const colors = {
    low: 'text-gray-500',
    medium: 'text-blue-500',
    high: 'text-orange-500',
    urgent: 'text-red-500'
  };
  return colors[priority];
};

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º)
 */
export const validateDeadline = (deadline: string): { isValid: boolean; error?: string } => {
  const now = new Date();
  const deadlineDate = new Date(deadline);
  
  if (deadlineDate < now) {
    return {
      isValid: false,
      error: '–î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º'
    };
  }
  
  return { isValid: true };
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const getDeadlineStatus = (deadline: string, deadlineType: DeadlineType = 'soft') => {
  if (isDeadlinePassed(deadline)) {
    return {
      status: 'overdue',
      text: getDeadlineText(deadline, deadlineType),
      color: getDeadlineColor(deadline, deadlineType),
      icon: '‚ö†Ô∏è'
    };
  }
  
  if (isDeadlineApproaching(deadline)) {
    return {
      status: 'approaching',
      text: getDeadlineText(deadline, deadlineType),
      color: getDeadlineColor(deadline, deadlineType),
      icon: '‚è∞'
    };
  }
  
  return {
    status: 'normal',
    text: getDeadlineText(deadline, deadlineType),
    color: getDeadlineColor(deadline, deadlineType),
    icon: '‚úÖ'
  };
};
